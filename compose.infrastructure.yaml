

services:
  minio:
    image: quay.io/minio/minio:RELEASE.2025-04-22T22-12-26Z
    command: server /data --console-address ":9001"
    ports:
      - "9001:9001"
      - "9000:9000"
    volumes:
      - bucket_storage:/data
    networks:
      - techtonic_plates_network
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-admin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-adminpassword}

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper:
    image: docker.io/confluentinc/cp-zookeeper:7.3.0
    hostname: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - techtonic_plates_network

  # Kafka Broker
  kafka:
    image: docker.io/confluentinc/cp-kafka:7.3.0
    hostname: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1

    extra_hosts:
      - "host.containers.internal:host-gateway"
  
    networks:
      - techtonic_plates_network
    # ports section is ignored in host mode
    # ports:
    #   - "9092:9092"

  # Kafka Connect with Debezium and MongoDB Sink
  kafka-connect:
    image: docker.io/confluentinc/cp-kafka-connect:7.3.0
    hostname: kafka-connect
    depends_on:
      - kafka
    environment:
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
      # Existing configs
      CONNECT_BOOTSTRAP_SERVERS: kafka:9092
      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR
    volumes:
      - connectors:/etc/kafka-connect/connectors
  
    extra_hosts:
      - "host.containers.internal:host-gateway"
    networks:
      - techtonic_plates_network
    command: >
      bash -c "
        echo 'Installing connectors...'
        confluent-hub install --no-prompt debezium/debezium-connector-postgresql:2.0.1
        confluent-hub install --no-prompt mongodb/kafka-connect-mongodb:1.7.0
        confluent-hub install --no-prompt confluentinc/kafka-connect-jdbc:10.8.4
        echo 'Waiting for Kafka Connect to start...'
        #while ! nc -z localhost 8083; do sleep 5; done
        echo 'Starting Kafka Connect...'
        /etc/confluent/docker/run
      "
  postgres:
    # Official Postgres image from DockerHub (we use the last version)
    image: docker.io/postgres:latest

    # By default, a Postgres database is running on the 5432 port.
    # If we want to access the database from our computer (outside the container),
    # we must share the port with our computer's port.
    # The syntax is [port we want on our machine]:[port we want to retrieve in the container]
    # Note: You are free to change your computer's port,
    # but take into consideration that it will change the way
    # you are connecting to your database.
    ports:
      - 5432:5432
    command: ["postgres", "-c", "wal_level=logical"]
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-techtonic} # The PostgreSQL user (useful to connect to the database)
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-Jkjz1yG9bKcWBeB1zFdgqg} # The PostgreSQL password (useful to connect to the database)
     # POSTGRES_DB: techtonic_plates
      DEBEZIUM_PASSWORD: ${DEBEZIUM_PASSWORD:-debezium_pass}
    volumes:
      - pg_data:/var/lib/postgresql/data/

    networks:
      - techtonic_plates_network
  

volumes:
  bucket_storage:
  connectors:
  pg_data:
  mongo_data:
  pgadmin_data:

networks:
  techtonic_plates_network:
    external: true