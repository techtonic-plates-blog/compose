version: '3.8'

services:
  # Assets Service
  assets:
    image: ghcr.io/techtonic-plates-blog/assets-service:nightly
    pull_policy: always
    env_file:
      - .env
    networks:
      - techtonic_plates_network
    ports:
      - "5134:5000"
    depends_on:
      minio:
        condition: service_healthy

  # Database Initializer
  database-init:
    image: ghcr.io/techtonic-plates-blog/infra-config-database-init:nightly
    pull_policy: always
    env_file:
      - .env
    networks:
      - techtonic_plates_network
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
      minio-bucket-init:
        condition: service_healthy
    entrypoint: >
      sh -c "
        /entrypoint.sh &&
        touch /tmp/init_done &&
        sleep infinity"
    healthcheck:
      test: ["CMD-SHELL", "test -f /tmp/init_done"]
      interval: 5s
      timeout: 3s
      retries: 10

  # Consolidated Migrations Service
  migrations:
    build:
      context: .
      dockerfile: Dockerfile.migrations
    pull_policy: build
    env_file:
      - .env
    environment:
      - RUST_BACKTRACE=full
      - AUTH_DATABASE_URL=${DATABASE_URL:-postgres://techtonic:Jkjz1yG9bKcWBeB1zFdgqg@postgres:5432/auth_service}
      - POSTS_DATABASE_URL=${DATABASE_URL:-postgres://techtonic:Jkjz1yG9bKcWBeB1zFdgqg@postgres:5432/posts_service}
      - COLLECTIONS_DATABASE_URL=${DATABASE_URL:-postgres://techtonic:Jkjz1yG9bKcWBeB1zFdgqg@postgres:5432/collections_service}
      - KAFKA_CONNECT_URL=http://kafka-connect:8083/
    networks:
      - techtonic_plates_network
    depends_on:
      database-init:
        condition: service_healthy
    command: >
      sh -c "
        echo 'Running auth migrations...' &&
        DATABASE_URL=$$AUTH_DATABASE_URL /app/auth-migration up &&
        echo 'Running posts migrations...' &&
        DATABASE_URL=$$POSTS_DATABASE_URL /app/posts-migration up &&
        echo 'Running collections migrations...' &&
        DATABASE_URL=$$COLLECTIONS_DATABASE_URL /app/collections-migration up &&
        echo 'All migrations completed successfully' &&
        touch /tmp/migrations_done &&
        sleep infinity"
    healthcheck:
      test: ["CMD-SHELL", "test -f /tmp/migrations_done"]
      interval: 5s
      timeout: 3s
      retries: 10

  # Kafka Connectors Initializer
  connectors-init:
    image: ghcr.io/techtonic-plates-blog/infra-config-connectors:nightly
    pull_policy: always
    env_file:
      - .env
    environment:
      - TF_VAR_kafka_connect_url="http://kafka-connect:8083/"
    networks:
      - techtonic_plates_network
    depends_on:
      migrations:
        condition: service_healthy
      kafka-connect:
        condition: service_healthy
    entrypoint: >
      sh -c "
        /entrypoint.sh &&
        touch /tmp/connectors_done &&
        sleep infinity"
    healthcheck:
      test: ["CMD-SHELL", "test -f /tmp/connectors_done"]
      interval: 5s
      timeout: 3s
      retries: 10

  auth:
    image: ghcr.io/techtonic-plates-blog/auth-service:nightly
    pull_policy: always
    env_file:
      - .env
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgres://techtonic:Jkjz1yG9bKcWBeB1zFdgqg@postgres:5432/auth_service}
    networks:
      - techtonic_plates_network
    ports:
      - "5133:5000"
    depends_on:
      connectors-init:
        condition: service_healthy
      kafka:
        condition: service_started

  # Dashboard Service
  dashboard:
    image: ghcr.io/techtonic-plates-blog/dashboard:nightly
    pull_policy: always
    env_file:
      - .env
    ports:
      - "3050:3000"
    networks:
      - techtonic_plates_network


  collections:
    image: ghcr.io/techtonic-plates-blog/collections-service:nightly
    pull_policy: always
    env_file:
      - .env
    environment:
      - RUST_BACKTRACE=full
      - DATABASE_URL=${DATABASE_URL:-postgres://techtonic:Jkjz1yG9bKcWBeB1zFdgqg@postgres:5432/collections_service}
      - KAFKA_CONNECT_URL=http://kafka-connect:8083/
      - JWT_PUBLIC_KEY=${JWT_PUBLIC_KEY}
    networks:
      - techtonic_plates_network
    ports:  
      - "5135:5000"
    depends_on:
      connectors-init:
        condition: service_healthy
      kafka:
        condition: service_started
  collections-query:
    image: ghcr.io/techtonic-plates-blog/collections-query:main
    pull_policy: always
    env_file:
      - .env
    environment:
      - RUST_BACKTRACE=full
      - DATABASE_URL=${DATABASE_URL:-postgres://techtonic:Jkjz1yG9bKcWBeB1zFdgqg@postgres:5432/collections_service}
      - JWT_PUBLIC_KEY=${JWT_PUBLIC_KEY}
    networks:
      - techtonic_plates_network
    ports:  
      - "5136:5000"
    depends_on:
      connectors-init:
        condition: service_healthy
      kafka:
        condition: service_started
  single-endpoint:
    image: ghcr.io/techtonic-plates-blog/single-endpoint/nginx-reverse-proxy:latest
    pull_policy: always
    ports:
      - "8080:80"
    depends_on:
      - auth
      - collections
      - collections-query
      - assets
    networks:
      - techtonic_plates_network
  # Infrastructure Services
  
  # MinIO Object Storage
  minio:
    image: quay.io/minio/minio:RELEASE.2025-04-22T22-12-26Z
    command: server /data --console-address ":9001"
    ports:
      - "9001:9001"
      - "9000:9000"
    volumes:
      - bucket_storage:/data
    networks:
      - techtonic_plates_network
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-admin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-adminpassword}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO Bucket Initializer
  minio-bucket-init:
    image: docker.io/minio/mc:latest
    networks:
      - techtonic_plates_network
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      sh -c "
        mc alias set myminio http://minio:9000 admin adminpassword &&
        mc mb myminio/tf-remote-state --ignore-existing &&
        touch /tmp/bucket_init_done &&
        sleep infinity"
    healthcheck:
      test: ["CMD-SHELL", "test -f /tmp/bucket_init_done"]
      interval: 5s
      timeout: 3s
      retries: 10


  # Zookeeper for Kafka
  zookeeper:
    image: docker.io/confluentinc/cp-zookeeper:7.3.0
    hostname: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - techtonic_plates_network

  # Kafka Broker
  kafka:
    image: docker.io/confluentinc/cp-kafka:7.3.0
    hostname: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    extra_hosts:
      - "host.containers.internal:host-gateway"
    networks:
      - techtonic_plates_network
    # ports section is ignored in host mode
    # ports:
    #   - "9092:9092"

  # Kafka Connect with Debezium and MongoDB Sink
  kafka-connect:
    image: docker.io/confluentinc/cp-kafka-connect:7.3.0
    hostname: kafka-connect
    depends_on:
      - kafka
    environment:
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
      # Existing configs
      CONNECT_BOOTSTRAP_SERVERS: kafka:9092
      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR
    volumes:
      - connectors:/etc/kafka-connect/connectors
    extra_hosts:
      - "host.containers.internal:host-gateway"
    networks:
      - techtonic_plates_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8083/connectors || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 12
      start_period: 60s
    command: >
      bash -c "
        echo 'Installing connectors...'
        confluent-hub install --no-prompt debezium/debezium-connector-postgresql:2.0.1
        confluent-hub install --no-prompt mongodb/kafka-connect-mongodb:1.7.0
        confluent-hub install --no-prompt confluentinc/kafka-connect-jdbc:10.8.4
        echo 'Waiting for Kafka Connect to start...'
        #while ! nc -z localhost 8083; do sleep 5; done
        echo 'Starting Kafka Connect...'
        /etc/confluent/docker/run
      "

  # PostgreSQL Database
  postgres:
    # Official Postgres image from DockerHub (we use the last version)
    image: docker.io/postgres:latest
    # By default, a Postgres database is running on the 5432 port.
    # If we want to access the database from our computer (outside the container),
    # we must share the port with our computer's port.
    # The syntax is [port we want on our machine]:[port we want to retrieve in the container]
    # Note: You are free to change your computer's port,
    # but take into consideration that it will change the way
    # you are connecting to your database.
    ports:
      - 5432:5432
    command: ["postgres", "-c", "wal_level=logical"]
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-techtonic} # The PostgreSQL user (useful to connect to the database)
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-Jkjz1yG9bKcWBeB1zFdgqg} # The PostgreSQL password (useful to connect to the database)
     # POSTGRES_DB: techtonic_plates
      DEBEZIUM_PASSWORD: ${DEBEZIUM_PASSWORD:-debezium_pass}
    volumes:
      - pg_data:/var/lib/postgresql/data/
    networks:
      - techtonic_plates_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER:-techtonic}"]
      interval: 10s
      timeout: 5s
      retries: 5
  redis:
    image: docker.io/redis:8.2.0-alpine
    restart: always
    ports:
      - "6379:6379"
    command: redis-server --save 20 1 --loglevel warning --requirepass techtonic
    networks:
      - techtonic_plates_network
    volumes:
      - redis:/data

volumes:
  bucket_storage:
  connectors:
  pg_data:
  mongo_data:
  pgadmin_data:
  redis:

networks:
  techtonic_plates_network:
    external: true
